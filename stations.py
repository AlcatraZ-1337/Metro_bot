import json
import random
import time
import pymorphy2
import os

from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove

from classes import User, Station, markup_station, Fight, Trade, Rat_game, markup_vladimirskaya
from started_functions import name_input

reply_keyboard_tunnel_novocherkasskaya = [['–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 1', '–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 2'],
                                          ['–í–µ—Å—ë–ª—ã–π –ø–æ—Å—ë–ª–æ–∫']]
markup_tunnel_novocherkasskaya = ReplyKeyboardMarkup(reply_keyboard_tunnel_novocherkasskaya,
                                                     one_time_keyboard=False)

reply_keyboard_tunnel_alexander_nevsky_square_1 = [['–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫–∞—è', '–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 2'],
                                                   ['–ú–∞—è–∫–æ–≤—Å–∫–∞—è']]
markup_tunnel_alexander_nevsky_square_1 = ReplyKeyboardMarkup(reply_keyboard_tunnel_alexander_nevsky_square_1,
                                                              one_time_keyboard=False)

reply_keyboard_tunnel_alexander_nevsky_square_2 = [['–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫–∞—è', '–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 1'],
                                                   ['–õ–∏–≥–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç']]
markup_tunnel_alexander_nevsky_square_2 = ReplyKeyboardMarkup(reply_keyboard_tunnel_alexander_nevsky_square_2,
                                                              one_time_keyboard=False)

reply_keyboard_tunnel_mayakovskaya = [['–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 1', '–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 2'],
                                      ['–ü–ª–æ—â–∞–¥—å –≤–æ—Å—Å—Ç–∞–Ω–∏—è']]
markup_tunnel_mayakovskaya = ReplyKeyboardMarkup(reply_keyboard_tunnel_mayakovskaya,
                                                 one_time_keyboard=False)

reply_keyboard_tunnel_vosstaniya_square = [['–ú–∞—è–∫–æ–≤—Å–∫–∞—è', '–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è']]
markup_tunnel_vosstaniya_square = ReplyKeyboardMarkup(reply_keyboard_tunnel_vosstaniya_square,
                                                      one_time_keyboard=False)

reply_keyboard_tunnel_ligovsky_avenue = [['–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 2', '–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è']]
markup_tunnel_ligovsky_avenue = ReplyKeyboardMarkup(reply_keyboard_tunnel_ligovsky_avenue,
                                                    one_time_keyboard=False)

reply_keyboard_tunnel_vladimirskaya = [['–õ–∏–≥–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç', '–ü–ª–æ—â–∞–¥—å –≤–æ—Å—Å—Ç–∞–Ω–∏—è']]
markup_tunnel_vladimirskaya = ReplyKeyboardMarkup(reply_keyboard_tunnel_vladimirskaya,
                                                  one_time_keyboard=False)

reply_keyboard_tunnel_merry_village = [['–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫–∞—è']]
markup_tunnel_merry_village = ReplyKeyboardMarkup(reply_keyboard_tunnel_merry_village,
                                                  one_time_keyboard=False)

reply_tunnels_move = [['–ò–¥—Ç–∏ –¥–∞–ª—å—à–µ'], ['üêæ–û—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–Ω–Ω–µ–ª—åüêæ']]
markup_tunnels_move = ReplyKeyboardMarkup(reply_tunnels_move,
                                          one_time_keyboard=False)


def station_distributor(update, context):
    try:
        with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'r') as f:
            data = json.load(f)
    except FileNotFoundError:
        update.message.reply_text("‚ùå –ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤—ã —É–¥–∞–ª–∏–ª–∏ —Å–≤–æ–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è! ‚ùå")
        name_input(update, context)
        return 1

    if data['fight_output']:
        fight_distributor(update, context)
    if data['trade_output']:
        trade_distributor(update, context)
    if data['rat_game_output'][0]:
        if data['rat_game_output'][1]:
            primary_rat_game_distributor(update, context)
        else:
            rat_game_distributor(update, context)

    activities = {'–ü–æ–º–µ–Ω—è—Ç—å—Å—è –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ —Å –∂–∏—Ç–µ–ª—è–º–∏': trade_choice,
                  '–í—ã–π—Ç–∏ —Å–æ —Å—Ç–∞–Ω—Ü–∏–∏': tunnels_choice,
                  '–û—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å': User(update, context).inventory,
                  '–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –¥–æ–º–∏–∫: 35 –ø–∞—Ç—Ä–æ–Ω–æ–≤': sleep,
                  '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É': geocoder,
                  '–ü–æ—Å—Ç–æ—è—Ç—å –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏ (–ü–æ—Å–ª—É—à–∞—Ç—å –º—É–∑—ã–∫—É)': station_music,
                  '–°—ã–≥—Ä–∞—Ç—å –≤ –ö–æ—Å—Ç–∏: 25 –ø–∞—Ç—Ä–æ–Ω–æ–≤': dice,
                  '–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ –∫—Ä—ã—Å–∏–Ω—ã—Ö –±–µ–≥–∞—Ö': rat_game_choice,

                  '–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫–∞—è': tunnels,
                  '–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 1': tunnels,
                  '–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 2': tunnels,
                  '–ú–∞—è–∫–æ–≤—Å–∫–∞—è': tunnels,
                  '–ü–ª–æ—â–∞–¥—å –≤–æ—Å—Å—Ç–∞–Ω–∏—è': tunnels,
                  '–õ–∏–≥–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç': tunnels,
                  '–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è': tunnels,
                  '–í–µ—Å—ë–ª—ã–π –ø–æ—Å—ë–ª–æ–∫': tunnels,

                  'üêæ–û—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–Ω–Ω–µ–ª—åüêæ': Fight(update, context).init_fight,
                  '–û—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞–Ω—Ü–∏—é': Fight(update, context).init_fight,
                  '–ò–¥—Ç–∏ –¥–∞–ª—å—à–µ': Fight(update, context).init_fight}

    current_station = Station(update, context)
    current_station.init_station(update, context)
    choice = update.message.text
    try:
        if choice == 'üêæ–û—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–Ω–Ω–µ–ª—åüêæ':
            with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'w') as f:
                data['fight_output'] = True
                data['question_output'] = True
                f.write(json.dumps(data))
        activities[choice](update, context)
    except TypeError:
        pass
    except KeyError:
        pass


def station_music(update, context):
    with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'r') as f:
        data = json.load(f)
        with open(f'Audio-data\{data["station"]}.mp3', 'rb') as ambient:
            update.message.reply_audio(ambient, title=data['station'])


def fight_distributor(update, context):
    current_fight = Fight(update, context)
    activities_fight = {'–ê—Ç–∞–∫–æ–≤–∞—Ç—å': current_fight.attack, '–°–±–µ–∂–∞—Ç—å': current_fight.escape}
    current_fight.init_fight(update, context)
    choice = update.message.text
    try:
        activities_fight[choice](update, context)
    except TypeError:
        pass
    except KeyError:
        pass


def tunnels_choice(update, context):
    stations = {'–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫–∞—è': markup_tunnel_novocherkasskaya,
                '–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 1': markup_tunnel_alexander_nevsky_square_1,
                '–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 2': markup_tunnel_alexander_nevsky_square_2,
                '–ú–∞—è–∫–æ–≤—Å–∫–∞—è': markup_tunnel_mayakovskaya,
                '–ü–ª–æ—â–∞–¥—å –≤–æ—Å—Å—Ç–∞–Ω–∏—è': markup_tunnel_vosstaniya_square,
                '–õ–∏–≥–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç': markup_tunnel_ligovsky_avenue,
                '–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è': markup_tunnel_vladimirskaya,
                '–í–µ—Å—ë–ª—ã–π –ø–æ—Å—ë–ª–æ–∫': markup_tunnel_merry_village}

    with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'r') as f:
        data = json.load(f)

    update.message.reply_text("–ö—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–π—Ç–∏?", reply_markup=stations[data['station']])


def tunnels(update, context):
    owners = {'–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫–∞—è': 'üõ°–ü–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ê–ª—å—è–Ω—Å–∞ –û–∫–∫–µ—Ä–≤–∏–ª—åüõ°',
              '–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 1': 'üõ°–ü–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ò–º–ø–µ—Ä–∏–∏ –í–µ–≥–∞–Ωüõ°',
              '–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 2': 'üõ°–ü–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ò–º–ø–µ—Ä–∏–∏ –í–µ–≥–∞–Ωüõ°',
              '–ú–∞—è–∫–æ–≤—Å–∫–∞—è': 'üõ°–ü–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ü—Ä–∏–º–æ—Ä—Å–∫–æ–≥–æ –∞–ª—å—è–Ω—Å–∞üõ°',
              '–ü–ª–æ—â–∞–¥—å –≤–æ—Å—Å—Ç–∞–Ω–∏—è': 'üõ°–ü–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ë–æ—Ä–¥—é—Ä—â–∏–∫–æ–≤üõ°',
              '–õ–∏–≥–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç': '‚ò†–ó–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è‚ò†',
              '–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è': 'ü™ñ–ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è —Å—Ç–∞–Ω—Ü–∏—èü™ñ',
              '–í–µ—Å—ë–ª—ã–π –ø–æ—Å—ë–ª–æ–∫': 'üçÑ–ü–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ì—Ä–∏–±–Ω–∏–∫–æ–≤üçÑ'}

    dangers = {'–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫–∞—è': '‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚úÖ',
               '–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 1': '‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚úÖ',
               '–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 2': '‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚úÖ',
               '–ú–∞—è–∫–æ–≤—Å–∫–∞—è': '‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚úÖ',
               '–ü–ª–æ—â–∞–¥—å –≤–æ—Å—Å—Ç–∞–Ω–∏—è': '‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚úÖ',
               '–õ–∏–≥–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç': '‚ö† –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚ö†',
               '–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è': '‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚úÖ',
               '–í–µ—Å—ë–ª—ã–π –ø–æ—Å—ë–ª–æ–∫': '‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚úÖ'}

    with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'r') as f:
        data = json.load(f)

    station_choice = update.message.text
    if (data['station'] == '–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 1' and station_choice == '–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 2') or \
            (data['station'] == '–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 2' and station_choice == '–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 1') \
            or (data['station'] == '–ú–∞—è–∫–æ–≤—Å–∫–∞—è' and station_choice == '–ü–ª–æ—â–∞–¥—å –≤–æ—Å—Å—Ç–∞–Ω–∏—è') \
            or (data['station'] == '–ü–ª–æ—â–∞–¥—å –≤–æ—Å—Å—Ç–∞–Ω–∏—è' and station_choice == '–ú–∞—è–∫–æ–≤—Å–∫–∞—è') \
            or (data['station'] == '–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫–∞—è' and station_choice == '–í–µ—Å—ë–ª—ã–π –ø–æ—Å—ë–ª–æ–∫') \
            or (data['station'] == '–í–µ—Å—ë–ª—ã–π –ø–æ—Å—ë–ª–æ–∫' and station_choice == '–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫–∞—è'):
        update.message.reply_text("–í—ã –±–µ–∑ –ø—Ä–æ–±–ª–µ–º –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Å—Ç–∞–Ω—Ü–∏—è–º–∏.",
                                  reply_markup=markup_station)

        with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'w') as f:
            data['station'] = station_choice
            data['owner'] = owners[station_choice]
            data['danger'] = dangers[station_choice]
            f.write(json.dumps(data))

    elif ((data['station'] == '–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 1' and station_choice == '–ú–∞—è–∫–æ–≤—Å–∫–∞—è') or
          (data['station'] == '–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 2' and station_choice == '–õ–∏–≥–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç')) and \
            data['attack'] < 20:
        update.message.reply_text("üö∑ –£ –≤–∞—Å —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ! üö∑\n"
                                  "–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–≤—ã—Å–∏—Ç—å –≤–∞—à –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å\n"
                                  "—É—Ä–æ–Ω–∞ –º–∏–Ω–∏–º—É–º –¥–æ: üî™20 –µ–¥.\n"
                                  f"–¢–µ–∫—É—â–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —É—Ä–æ–Ω–∞: üî™{data['attack']} –µ–¥.",
                                  reply_markup=markup_station)
    else:
        update.message.reply_text("–í—ã –∏–¥—ë—Ç–µ –ø–æ —Ç–æ–Ω–Ω–µ–ª—è–º.", reply_markup=markup_tunnels_move)

        with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'w') as f:
            data['station'] = station_choice
            data['owner'] = owners[station_choice]
            data['danger'] = dangers[station_choice]
            data['question_output'] = False
            f.write(json.dumps(data))


def trade_distributor(update, context):
    normal_trade_stations = ['–ú–∞—è–∫–æ–≤—Å–∫–∞—è', '–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è', '–ü–ª–æ—â–∞–¥—å –≤–æ—Å—Å—Ç–∞–Ω–∏—è']
    drug_station = '–í–µ—Å—ë–ª—ã–π –ø–æ—Å—ë–ª–æ–∫'

    trade_things_simple_stations = {'–£–ª—É—á—à–µ–Ω–∏–µ –ø–∏—Å—Ç–æ–ª–µ—Ç–∞': [40, 10, 30, 15, 0, 0],
                                    'üçñ–ï–¥–∞üçñ': [10, 0, 5, 0, 0, 0],
                                    'üî´–ü—è—Ç—å –ü–∞—Ç—Ä–æ–Ω–æ–≤üî´': [0, 0, 5, 5, 0, 0]}
    trade_things_mayakovskaya = {'–£–ª—É—á—à–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞': [30, 10, 0, 0, 15, 20],
                                 'üçñ–¢—Ä–∏ –µ–¥—ãüçñ': [12, 0, 0, 0, 6, 0],
                                 'üî´–î–µ—Å—è—Ç—å –ü–∞—Ç—Ä–æ–Ω–æ–≤üî´': [0, 0, 0, 0, 6, 6]}
    trade_things_drug_station = {
        'üíä–í–∏—Ç–∞–º–∏–Ω–∫–∏üíä ü™¥': [0, 0, 15, 0, 15, 0],
        '–í–∏—Ç–∞–º–∏–Ω–∫–∏üíä \U0001fab5': [0, 0, 0, 10, 0, 10],
        'üíä–í–∏—Ç–∞–º–∏–Ω–∫–∏üíä ü•©': [0, 20, 0, 0, 0, 0]}

    items_exchange = {'üçñ–ï–¥–∞üçñ': 'food',
                      'üçñ–¢—Ä–∏ –µ–¥—ãüçñ': 'food',
                      'üî´–ü—è—Ç—å –ü–∞—Ç—Ä–æ–Ω–æ–≤üî´': 'bullets',
                      'üî´–î–µ—Å—è—Ç—å –ü–∞—Ç—Ä–æ–Ω–æ–≤üî´': 'bullets',
                      '–£–ª—É—á—à–µ–Ω–∏–µ –ø–∏—Å—Ç–æ–ª–µ—Ç–∞': 'attack',
                      '–£–ª—É—á—à–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞': 'attack',
                      'üíä–í–∏—Ç–∞–º–∏–Ω–∫–∏üíä ü™¥': 'trade_item_5',
                      '–í–∏—Ç–∞–º–∏–Ω–∫–∏üíä \U0001fab5': 'trade_item_5',
                      'üíä–í–∏—Ç–∞–º–∏–Ω–∫–∏üíä ü•©': 'trade_item_5'}
    number_items_exchange = {'üçñ–ï–¥–∞üçñ': 1,
                             'üçñ–¢—Ä–∏ –µ–¥—ãüçñ': 3,
                             'üî´–ü—è—Ç—å –ü–∞—Ç—Ä–æ–Ω–æ–≤üî´': 5,
                             'üî´–î–µ—Å—è—Ç—å –ü–∞—Ç—Ä–æ–Ω–æ–≤üî´': 10,
                             '–£–ª—É—á—à–µ–Ω–∏–µ –ø–∏—Å—Ç–æ–ª–µ—Ç–∞': 5,
                             '–£–ª—É—á—à–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞': 10,
                             'üíä–í–∏—Ç–∞–º–∏–Ω–∫–∏üíä ü™¥': 1,
                             '–í–∏—Ç–∞–º–∏–Ω–∫–∏üíä \U0001fab5': 1,
                             'üíä–í–∏—Ç–∞–º–∏–Ω–∫–∏üíä ü•©': 1}

    with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'r') as f:
        data = json.load(f)

    choice = update.message.text

    if choice != '–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫—É–ø–∞—Ç—å':
        if data['station'] not in normal_trade_stations:
            if data['station'] != drug_station:
                cost = trade_things_simple_stations[choice]

                with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'w') as f:
                    data['question_output'] = True
                    data['trade_output'] = False

                    if data['bullets'] >= cost[0] and data['food'] >= cost[1] and data['trade_item_1'] >= cost[2] and \
                            data['trade_item_2'] >= cost[3]:
                        data[items_exchange[choice]] = data[items_exchange[choice]] + number_items_exchange[choice]

                        data['bullets'] = data['bullets'] - cost[0]
                        data['food'] = data['food'] - cost[1]

                        data['trade_item_1'] = data['trade_item_1'] - cost[2]
                        data['trade_item_2'] = data['trade_item_2'] - cost[3]
                        update.message.reply_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏: {choice}. ‚úÖ")

                    else:
                        update.message.reply_text(f"‚ö† –û–±–º–µ–Ω –Ω–µ —É–¥–∞–ª—Å—è!!! –ù–µ—Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤. ‚ö†")
                    f.write(json.dumps(data))
            else:
                cost = trade_things_drug_station[choice]

                with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'w') as f:
                    data['question_output'] = True
                    data['trade_output'] = False

                    if data['bullets'] >= cost[0] and data['food'] >= cost[1] and data['trade_item_1'] >= cost[2] and \
                            data['trade_item_2'] >= cost[3] and data['trade_item_3'] >= cost[4] and \
                            data['trade_item_4'] >= cost[5]:
                        data[items_exchange[choice]] = data[items_exchange[choice]] + number_items_exchange[choice]

                        data['bullets'] = data['bullets'] - cost[0]
                        data['food'] = data['food'] - cost[1]

                        data['trade_item_1'] = data['trade_item_1'] - cost[2]
                        data['trade_item_2'] = data['trade_item_2'] - cost[3]
                        data['trade_item_3'] = data['trade_item_3'] - cost[4]
                        data['trade_item_4'] = data['trade_item_4'] - cost[5]

                        update.message.reply_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏: {choice}. ‚úÖ")

                    else:
                        update.message.reply_text(f"‚ö† –û–±–º–µ–Ω –Ω–µ —É–¥–∞–ª—Å—è!!! –ù–µ—Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤. ‚ö†")
                    f.write(json.dumps(data))

        else:
            cost = trade_things_mayakovskaya[choice]
            with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'w') as f:
                data['question_output'] = True
                data['trade_output'] = False

                if data['bullets'] >= cost[0] and data['food'] >= cost[1] and data['trade_item_3'] >= cost[4] and \
                        data['trade_item_4'] >= cost[5]:
                    data[items_exchange[choice]] = data[items_exchange[choice]] + number_items_exchange[choice]

                    data['bullets'] = data['bullets'] - cost[0]
                    data['food'] = data['food'] - cost[1]

                    data['trade_item_3'] = data['trade_item_3'] - cost[4]
                    data['trade_item_4'] = data['trade_item_4'] - cost[5]

                    update.message.reply_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏: {choice}. ‚úÖ")

                else:
                    update.message.reply_text(f"‚ö† –û–±–º–µ–Ω –Ω–µ —É–¥–∞–ª—Å—è!!! –ù–µ—Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤. ‚ö†")
                f.write(json.dumps(data))
    else:
        with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'w') as f:
            data['question_output'] = True
            data['trade_output'] = False
            update.message.reply_text(f"‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –ø–æ–º–µ–Ω—è—Ç—å—Å—è –≤–µ—â–∞–º–∏. ‚ùå")
            f.write(json.dumps(data))


def trade_choice(update, context):
    current_trade = Trade(update, context)
    current_trade.init_trade(update, context)

    with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'r') as f:
        data = json.load(f)

    with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'w') as f:
        data['question_output'] = False
        data['trade_output'] = True
        f.write(json.dumps(data))


def primary_rat_game_distributor(update, context):
    with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'r') as f:
        data1 = json.load(f)

    with open(f'JSON-data\games_in_metro{update.message.chat_id}.json', 'r') as g:
        data2 = json.load(g)

    choice = update.message.text
    if choice == '–ù–∏ –Ω–∞ –∫–æ–≥–æ –Ω–µ —Å—Ç–∞–≤–∏—Ç—å':
        with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'w') as f:
            data1['question_output'] = True
            data1['rat_game_output'][0] = False
            data1['rat_game_output'][1] = False
            update.message.reply_text(f"‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É. ‚ùå")
            f.write(json.dumps(data1))
    else:
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏.",
                                  reply_markup=ReplyKeyboardMarkup([['üî´ 25 –ø–∞—Ç—Ä–æ–Ω–æ–≤ üî´', 'üî´ 50 –ø–∞—Ç—Ä–æ–Ω–æ–≤ üî´',
                                                                     'üî´ 100 –ø–∞—Ç—Ä–æ–Ω–æ–≤ üî´'], ['üî´ 150 –ø–∞—Ç—Ä–æ–Ω–æ–≤ üî´']],
                                                                   one_time_keyboard=True))
        with open(f'JSON-data\games_in_metro{update.message.chat_id}.json', 'w') as g:
            data2['player_choice'] = choice
            g.write(json.dumps(data2))
        with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'w') as f:
            data1['rat_game_output'][1] = False
            f.write(json.dumps(data1))


def rat_game_distributor(update, context):
    choice = update.message.text

    bets = {'üî´ 25 –ø–∞—Ç—Ä–æ–Ω–æ–≤ üî´': 25, 'üî´ 50 –ø–∞—Ç—Ä–æ–Ω–æ–≤ üî´': 50, 'üî´ 100 –ø–∞—Ç—Ä–æ–Ω–æ–≤ üî´': 100, 'üî´ 150 –ø–∞—Ç—Ä–æ–Ω–æ–≤ üî´': 150}

    if choice in bets:
        update.message.reply_text(f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏: {choice}.")

        player_bet = bets[choice]

        with open(f'JSON-data\games_in_metro{update.message.chat_id}.json', 'r') as f:
            data = json.load(f)
            first_rat, second_rat, third_rat, fourth_rat, fifth_rat, player_choice = \
                (data[i] for i in data)

        with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'r') as f:
            data = json.load(f)

        with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'w') as f:
            data['bullets'] = data['bullets'] - bets[choice]
            f.write(json.dumps(data))

        race_time = random.randint(15, 35)
        update.message.reply_text(f"–î–∞–Ω–Ω—ã–π –∑–∞–±–µ–≥ –±—É–¥–µ—Ç –¥–ª–∏—Ç—å—Å—è: ‚è∞ {race_time} —Å–µ–∫—É–Ω–¥ ‚è∞\n"
                                  f"–í–æ–∑—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –∑–∞–±–µ–≥ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
        time.sleep(race_time)
        rat_game_calculation(update, context, first_rat, second_rat, third_rat, fourth_rat, fifth_rat,
                             player_choice, player_bet)
    else:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ç—Ä–æ–Ω–æ–≤, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É!!!")

        with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'r') as f:
            data = json.load(f)

        with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'w') as f:
            data['question_output'] = True
            data['rat_game_output'][0] = False
            data['rat_game_output'][1] = False
            f.write(json.dumps(data))


def rat_game_choice(update, context):
    current_rat_game = Rat_game(update, context)
    current_rat_game.init_rat_game(update, context)

    with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'r') as f:
        data = json.load(f)

    with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'w') as f:
        data['question_output'] = False
        data['rat_game_output'][0] = True
        data['rat_game_output'][1] = True
        f.write(json.dumps(data))


def rat_game_calculation(update, content, first_rat, second_rat, third_rat, fourth_rat, fifth_rat, player_choice,
                         player_bet):
    morph = pymorphy2.MorphAnalyzer()
    bets_on_rats = {
        f'–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ {morph.parse("".join(c for c in first_rat[0] if c.isalpha()))[0].inflect({"gent"}).word.capitalize()}':
            first_rat[0],
        f'–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ {morph.parse("".join(c for c in second_rat[0] if c.isalpha()))[0].inflect({"gent"}).word.capitalize()}':
            second_rat[0],
        f'–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ {morph.parse("".join(c for c in third_rat[0] if c.isalpha()))[0].inflect({"gent"}).word.capitalize()}':
            third_rat[0],
        f'–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ {morph.parse("".join(c for c in fourth_rat[0] if c.isalpha()))[0].inflect({"gent"}).word.capitalize()}':
            fourth_rat[0],
        f'–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ {morph.parse("".join(c for c in fifth_rat[0] if c.isalpha()))[0].inflect({"gent"}).word.capitalize()}':
            fifth_rat[0]
    }
    rats_names = [first_rat[0], second_rat[0], third_rat[0], fourth_rat[0], fifth_rat[0]]
    rats_chances = [first_rat[1], second_rat[1], third_rat[1], fourth_rat[1], fifth_rat[1]]

    first_place, second_place, third_place = '', '', ''
    coincidence = True
    while coincidence:
        first_place, second_place, third_place = (random.choices(rats_names, weights=rats_chances) for _ in range(3))
        places_check = [first_place[0], second_place[0], third_place[0]]
        unique_places_check = set(places_check)
        if len(unique_places_check) == len(places_check):
            coincidence = False
        else:
            coincidence = True

    if first_place[0] == bets_on_rats[player_choice]:
        update.message.reply_text("–ö—Ä—ã—Å–∏–Ω—ã–µ –±–µ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.\n"
                                  "ü•á –í–∞—à–∞ –∫—Ä—ã—Å–∞ –ø—Ä–∏—à–ª–∞ –∫ —Ñ–∏–Ω–∏—à—É –ø–µ—Ä–≤–æ–π ü•á\n"
                                  f"–í–∞—à –≤—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: üî´ {player_bet * 3} –ø–∞—Ç—Ä–æ–Ω–æ–≤üî´.",
                                  reply_markup=markup_vladimirskaya)

        with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'r') as f:
            data = json.load(f)

        with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'w') as f:
            data['bullets'] = data['bullets'] + (player_bet * 3)
            data['question_output'] = True
            data['rat_game_output'][0] = False
            f.write(json.dumps(data))

    elif second_place[0] == bets_on_rats[player_choice]:
        update.message.reply_text("–ö—Ä—ã—Å–∏–Ω—ã–µ –±–µ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.\n"
                                  "ü•à –í–∞—à–∞ –∫—Ä—ã—Å–∞ –ø—Ä–∏—à–ª–∞ –∫ —Ñ–∏–Ω–∏—à—É –≤—Ç–æ—Ä–æ–π ü•à\n"
                                  f"–í–∞—à –≤—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: üî´ {player_bet * 2} –ø–∞—Ç—Ä–æ–Ω–æ–≤üî´.",
                                  reply_markup=markup_vladimirskaya)

        with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'r') as f:
            data = json.load(f)

        with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'w') as f:
            data['bullets'] = data['bullets'] + (player_bet * 2)
            data['question_output'] = True
            data['rat_game_output'][0] = False
            f.write(json.dumps(data))

    elif third_place[0] == bets_on_rats[player_choice]:
        update.message.reply_text("–ö—Ä—ã—Å–∏–Ω—ã–µ –±–µ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.\n"
                                  "ü•â –í–∞—à–∞ –∫—Ä—ã—Å–∞ –ø—Ä–∏—à–ª–∞ –∫ —Ñ–∏–Ω–∏—à—É —Ç—Ä–µ—Ç—å–µ–π ü•â\n"
                                  f"–í—ã —Å–º–æ–≥–ª–∏ –ª–∏—à—å –æ—Ç–±–∏—Ç—å —Å–≤–æ—é —Å—Ç–∞–≤–∫—É –≤ üî´  {player_bet} –ø–∞—Ç—Ä–æ–Ω–æ–≤üî´.",
                                  reply_markup=markup_vladimirskaya)

        with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'r') as f:
            data = json.load(f)

        with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'w') as f:
            data['bullets'] = data['bullets'] + player_bet
            data['question_output'] = True
            data['rat_game_output'][0] = False
            f.write(json.dumps(data))

    else:
        update.message.reply_text("–ö—Ä—ã—Å–∏–Ω—ã–µ –±–µ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.\n"
                                  "–í–∞—à–∞ –∫—Ä—ã—Å–∞ –Ω–µ –∑–∞–Ω—è–ª–∞ –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç.", reply_markup=markup_vladimirskaya)

        with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'r') as f:
            data = json.load(f)

        with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'w') as f:
            data['question_output'] = True
            data['rat_game_output'][0] = False
            f.write(json.dumps(data))

    update.message.reply_text(f"ü•á 1 –º–µ—Å—Ç–æ: {first_place[0]}\n"
                              f"ü•à 2 –º–µ—Å—Ç–æ: {second_place[0]}\n"
                              f"ü•â 3 –º–µ—Å—Ç–æ: {third_place[0]}")

    os.remove(f'JSON-data\games_in_metro{update.message.chat_id}.json')


def sleep(update, content):
    update.message.reply_text("‚ô• –í–æ –≤—Ä–µ–º—è —Å–Ω–∞ –≤—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ ‚ô•")

    with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'r') as f:
        data = json.load(f)

    with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'w') as f:
        data['health'] = 100
        data['bullets'] = data['bullets'] - 35
        f.write(json.dumps(data))


def geocoder(update, context):
    with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'r') as f:
        data = json.load(f)

    api_requests = {'–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫–∞—è': f"http://static-maps.yandex.ru/1.x/?ll=30.315721,59.971093&spn=0.5,0.5&l=map&pt="
                                      f"30.411310,59.929214,pm2rdl",
                    '–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 1': f"http://static-maps.yandex.ru/1.x/?ll=30.315721,59.971093&spn="
                                                     f"0.5,0.5&l=map&pt=30.385229,59.924287,pm2rdl",
                    '–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 2': f"http://static-maps.yandex.ru/1.x/?ll=30.315721,59.971093&spn="
                                                     f"0.5,0.5&l=map&pt=30.385229,59.924287,pm2rdl",
                    '–ú–∞—è–∫–æ–≤—Å–∫–∞—è': f"http://static-maps.yandex.ru/1.x/?ll=30.315721,59.971093&spn="
                                  f"0.5,0.5&l=map&pt=30.355314,59.931386,pm2rdl",
                    '–ü–ª–æ—â–∞–¥—å –≤–æ—Å—Å—Ç–∞–Ω–∏—è': f'http://static-maps.yandex.ru/1.x/?ll=30.315721,59.971093&spn='
                                         f'0.5,0.5&l=map&pt=30.361534,59.931057,pm2rdl',
                    '–õ–∏–≥–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç': f"http://static-maps.yandex.ru/1.x/?ll=30.315721,59.971093&spn="
                                          f"0.5,0.5&l=map&pt=30.342606,59.971093,pm2rdl",
                    '–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è': f'http://static-maps.yandex.ru/1.x/?ll=30.315721,59.971093&spn='
                                    f'0.5,0.5&l=map&pt=30.348208,59.927432,pm2rdl',
                    '–í–µ—Å—ë–ª—ã–π –ø–æ—Å—ë–ª–æ–∫': f"http://static-maps.yandex.ru/1.x/?ll=30.315721,59.971093&spn=0.5,0.5&l=map&pt="
                                       f"30.483364,59.907439,pm2rdl"}
    context.bot.send_photo(
        update.message.chat_id,
        api_requests[data['station']], f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è:\n"
                                       f"‚ò¢ {data['station']} ‚ò¢")


def dice(update, context):
    update.message.reply_text("üé≤ –í—ã —Ä–µ—à–∏–ª–∏ —Å—ã–≥—Ä–∞—Ç—å –≤ –ö–æ—Å—Ç–∏ —Å –º–µ—Å—Ç–Ω—ã–º–∏ –∂–∏—Ç–µ–ª—è–º–∏ üé≤.\n", reply_markup=ReplyKeyboardRemove())

    time.sleep(2)
    update.message.reply_text("üî¥ –í–∞—à –±—Ä–æ—Å–æ–∫: üî¥\n")
    player_result = update.message.reply_dice()
    player_result = player_result['dice']['value']
    time.sleep(5)

    update.message.reply_text("üîµ –ë—Ä–æ—Å–æ–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞: üîµ\n")
    ai_result = update.message.reply_dice()
    ai_result = ai_result['dice']['value']
    time.sleep(5)

    update.message.reply_text(f"üî¥ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {player_result} üî¥.\n"
                              f"üîµ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–ø–µ—Ä–Ω–∏–∫–∞: {ai_result} üîµ.\n")

    with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'r') as f:
        data = json.load(f)

    with open(f'JSON-data\main_hero{update.message.chat_id}.json', 'w') as f:
        if player_result < ai_result:
            data['bullets'] = data['bullets'] - 25
            update.message.reply_text("üîµ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! üîµ\n"
                                      "üî´ –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏: 25 –ø–∞—Ç—Ä–æ–Ω–æ–≤ üî´.", reply_markup=markup_station)
        elif player_result > ai_result:
            data['bullets'] = data['bullets'] + 25
            update.message.reply_text("üî¥ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üî¥ \n"
                                      "üî´ –í—ã –ø–æ–ª—É—á–∏–ª–∏: 25 –ø–∞—Ç—Ä–æ–Ω–æ–≤ üî´.", reply_markup=markup_station)
        else:
            update.message.reply_text("üî¥ –ù–∏—á—å—è üîµ.", reply_markup=markup_station)

        time.sleep(1)
        f.write(json.dumps(data))
