import json
from random import random

from telegram.ext import ConversationHandler
from telegram import ReplyKeyboardMarkup

reply_keyboard_novocherkasskaya = [['–í–∑—è—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É', '–í—ã–π—Ç–∏ —Å–æ —Å—Ç–∞–Ω—Ü–∏–∏'],
                                   ['–û—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', '–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –¥–æ–º–∏–∫ –Ω–∞ –Ω–æ—á—å: 35 –ø–∞—Ç—Ä–æ–Ω–æ–≤'],
                                   ['–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É']]
markup_novocherkasskaya = ReplyKeyboardMarkup(reply_keyboard_novocherkasskaya, one_time_keyboard=True)

reply_keyboard_trade_novocherkasskaya = [['–ö—É–ø–∏—Ç—å', '–ü—Ä–æ–¥–∞—Ç—å'], ['–£–π—Ç–∏']]
markup_trade_novocherkasskaya = ReplyKeyboardMarkup(reply_keyboard_trade_novocherkasskaya, one_time_keyboard=True)

reply_novocherkasskaya_buy = [['–ï–¥–∞', '–ù–æ–∂', '–û–±—Ä–µ–∑'], ['–ö–æ—Å—Ç—é–º —Å–æ–ª–¥–∞—Ç–∞ –û–∫–∫–µ—Ä–≤–∏–ª—å—Å–∫–æ–≥–æ –∞–ª—å—è–Ω—Å–∞']]
markup_novocherkasskaya_buy = ReplyKeyboardMarkup(reply_novocherkasskaya_buy, one_time_keyboard=True)

reply_novocherkasskaya_sell = [['–ï–¥–∞', '–ö–∏—Å–ª–∏–∫', '–¢—É–Ω–µ–ª—å–Ω—ã–π –∫–∞–º–µ–Ω—å'], ['–†–∂–∞–≤–∞—è —Ç—Ä–∞–≤–∞', '–ö–µ—Ä–æ—Å–∏–Ω']]
markup_novocherkasskaya_sell = ReplyKeyboardMarkup(reply_novocherkasskaya_sell, one_time_keyboard=True)

reply_tunnels_move = [['–ò–¥—Ç–∏ –¥–∞–ª—å—à–µ']]
markup_tunnels_move = ReplyKeyboardMarkup(reply_tunnels_move, one_time_keyboard=True)


class User:
    def __init__(self):
        with open('main_hero.json', 'r') as f:
            data = json.load(f)
        self.id = None
        self.name = data['name']

        self.health = data['health']
        self.armor = data['armor']
        self.attack = data['attack']

        self.bullets = data['bullets']
        self.food = data['food']

        self.trade_item_1 = data['trade_item_1']
        self.trade_item_2 = data['trade_item_2']
        self.trade_item_3 = data['trade_item_3']
        self.trade_item_4 = data['trade_item_4']

        self.costume = 0
        self.weapon = 0

    def inventory(self, update, context):
        update.message.reply_text(
            f"üßç –í–∞—à–µ –∏–º—è: {self.name} üßç\n"
            f"‚ô• –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: {self.health} ‚ô•\n"
            f"üõ° –í–∞—à–∞ –±—Ä–æ–Ω—è: {self.armor} üõ°\n"
            f"üî™–í–∞—à —É—Ä–æ–Ω: {self.attack} üî™\n"
            "\n"
            f"üî´ –í–∞—à–∏ –ø–∞—Ç—Ä–æ–Ω—ã: {self.bullets} üî´\n"
            f"üçñ –í–∞—à –∑–∞–ø–∞—Å –µ–¥—ã: {self.food} üçñ\n"
            "\n"
            "‚ôº –í–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –±–∞—Ä—Ç–µ—Ä–∞: ‚ôº\n"
            f"üçÑ –ö–∏—Å–ª–∏–∫: {self.trade_item_1} üçÑ\n"
            f"üßº –¢—É–Ω–µ–ª—å–Ω—ã–π –∫–∞–º–µ–Ω—å: {self.trade_item_2} üßº\n"
            f"üåø –†–∂–∞–≤–∞—è —Ç—Ä–∞–≤–∞: {self.trade_item_3} üåø\n"
            f"üõ¢ –ö–µ—Ä–æ—Å–∏–Ω: {self.trade_item_4} üõ¢")


class Fight:
    def __init__(self):
        pass

    def tunnels(self, update, context):
        update.message.reply_text("–í—ã –∏–¥—ë—Ç–µ –ø–æ —Ç–æ–Ω–Ω–µ–ª—è–º.")
        # random_tunnel = random.randint(0, 2)
        update.message.reply_text("–í—ã –±–µ–∑ –ø—Ä–æ–±–ª–µ–º –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ —Ç–æ–Ω–Ω–µ–ª—å.", reply_markup=markup_tunnels_move)


def sleep(update, content):
    update.message.reply_text("–í–æ –≤—Ä–µ–º—è —Å–Ω–∞ –≤—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤—Å—ë —Å–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ.")
    User.health = 100


def novocherkasskaya(update, context):
    novocherkasskaya_choice_check(update, context)
    choice = update.message.text

    if choice == reply_keyboard_novocherkasskaya[0][0]:
        pass
    elif choice == reply_keyboard_novocherkasskaya[0][1]:
        Fight().tunnels(update, context)
        return 4

    answer = update.message.text
    if answer == '–ù–µ—Ç':
        update.message.reply_text("–ù—É –∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! –ù—É –∏ –Ω–µ –Ω—É–∂–Ω–æ! –ù—É –∏ –æ—á–µ–Ω—å —Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ!")
        update.message.reply_text("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–∞–º–æ–π –ø–µ—Ä–≤–æ–π –¥–µ–º–∫–∏)))")
        return ConversationHandler.END
    update.message.reply_text("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏: –ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫–∞—è.\n"
                              "–°—Ç–∞–Ω—Ü–∏—è –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –û–∫–∫–µ—Ä–≤–∏–ª—å—Å–∫–æ–≥–æ –∞–ª—å—è–Ω—Å–∞.\n"
                              "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup_novocherkasskaya)


def novocherkasskaya_choice_check(update, context):
    with open('main_hero.json', 'r') as f:
        data = json.load(f)
    choice = update.message.text

    if choice == reply_keyboard_novocherkasskaya[1][0]:
        User().inventory(update, context)
    elif choice == reply_keyboard_novocherkasskaya[1][1]:
        update.message.reply_text("–í—ã –∑–∞–ø–ª–∞—Ç–∏–ª–∏ 35 –ø–∞—Ç—Ä–æ–Ω–æ–≤ –∑–∞ –¥–æ–º–∏–∫ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫–∞—è.")
        with open('main_hero.json', 'w') as f:
            data['bullets'] = data['bullets'] - 35
            f.write(json.dumps(data))
        sleep(update, context)
    elif choice == reply_keyboard_novocherkasskaya[2][0]:
        geocoder_novocherkasskaya(update, context, False)


def geocoder_novocherkasskaya(update, context, caption):
    static_api_request = f"http://static-maps.yandex.ru/1.x/?ll=30.315721,59.971093&spn=0.5,0.5&l=map&pt=30.411310," \
                         f"59.929214,pm2rdl"
    if caption:
        context.bot.send_photo(
            update.message.chat_id,
            static_api_request,
            caption=f'–í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –∏–≥—Ä—É –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏: –ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫–∞—è.'
        )
    else:
        context.bot.send_photo(
            update.message.chat_id,
            static_api_request,
        )


def geocoder_alexander_nevsky_square(update, context):
    static_api_request = f"http://static-maps.yandex.ru/1.x/?ll=30.315721,59.971093&spn=0.5,0.5&l=map&pt=30.385229," \
                         f"59.924287,pm2rdl"
    context.bot.send_photo(
        update.message.chat_id,
        static_api_request,
    )


def alexander_nevsky_square_1(update, context):
    with open('main_hero.json', 'r') as f:
        data = json.load(f)
    choice = update.message.text

    if choice == reply_keyboard_novocherkasskaya[0][0]:
        pass
    elif choice == reply_keyboard_novocherkasskaya[0][1]:
        Fight().tunnels(update, context)
        return 4
    elif choice == reply_keyboard_novocherkasskaya[1][0]:
        User().inventory(update, context)
    elif choice == reply_keyboard_novocherkasskaya[1][1]:
        update.message.reply_text("–í—ã –∑–∞–ø–ª–∞—Ç–∏–ª–∏ 15 –ø–∞—Ç—Ä–æ–Ω–æ–≤ –∑–∞ –¥–æ–º–∏–∫ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –ø–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 1.")
        with open('main_hero.json', 'w') as f:
            data['bullets'] = data['bullets'] - 15
            f.write(json.dumps(data))
        sleep(update, context)
    elif choice == reply_keyboard_novocherkasskaya[2][0]:
        geocoder_alexander_nevsky_square(update, context)

    update.message.reply_text("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏: –ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 1.\n"
                              "–°—Ç–∞–Ω—Ü–∏—è –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ò–º–ø–µ—Ä–∏–∏ –í–µ–≥–∞–Ω.\n"
                              "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup_novocherkasskaya)


def alexander_nevsky_square_2(update, context):
    update.message.reply_text("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏: –ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ 2.\n"
                              "–°—Ç–∞–Ω—Ü–∏—è –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ò–º–ø–µ—Ä–∏–∏ –í–µ–≥–∞–Ω.\n"
                              "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup_novocherkasskaya)

    return 7


def mayakovskaya(update, context):
    update.message.reply_text("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏: –ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫–∞—è.\n"
                              "–°—Ç–∞–Ω—Ü–∏—è –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –û–∫–∫–µ—Ä–≤–∏–ª—å—Å–∫–æ–≥–æ –∞–ª—å—è–Ω—Å–∞.\n"
                              "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup_novocherkasskaya)

    return 7
